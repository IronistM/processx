% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/package.R
\name{process}
\alias{process}
\title{External process}
\description{
Managing external processes from R is not trivial, and this
class aims to help with this deficiency. It is essentially a small
wrapper around the \code{system} base R function, to return the process
id of the started process. This id is then used to manage the process.
}
\section{Usage}{

\preformatted{p <- process$new(command, args)
p$is_alive()
p$kill(grace = 0.1)
p$restart()}
}

\section{Arguments}{

\describe{
  \item{command}{Character scalar, the command to run.}
  \item{args}{Character vector, arguments to the command. No additional
    escaping is performed, so if you need to escape arguments,
    consider using \code{\link[base]{shQuote}}.}
  \item{grace}{Grace pediod between the TERM and KILL signals, in
    seconds.}
}
}

\section{Details}{

\code{$new()} starts a new process. The arguments are passed to
\code{\link[base]{system2}}. R does \emph{not} wait for the process
to finish, but returns immediately.

\code{$is_alive()} checks if the process is alive. Returns a logical
scalar.

\code{$kill()} kills the process. It also kills all of its child
processes. First it sends the child processes a \code{TERM} signal, and
then after a grace period a \code{KILL} signal. Then it does the same
for the process itself. A killed process can be restarted using the
\code{restart} method. It returns the process itself.

\code{$restart()} restarts a process. It returns the process itself.
}
\examples{
p <- process$new("sleep", "2")
p$is_alive()
p$kill()
p$is_alive()

p$restart()
p$is_alive()
Sys.sleep(3)
p$is_alive()

}

